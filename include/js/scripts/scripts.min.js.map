{"version":3,"sources":["models/singleFlowerModel.js","routes/router.js","yy-collections/allFlower.js","views/allFlowerView.js","views/singleFLowerView.js","zz-main/main.js"],"names":["console","log","app","singleFlower","Backbone","Model","extend","defaults","color","img","FlowersCollection","Collection","model","allFlowersView","View","tagName","render","this","collection","each","addFlower","flower","flowerView","singleFlowerView","$el","append","el","className","template","_","$","html","flowerTemplate","toJSON","redRoses","name","price","link","rainbowRoses","heirloomRoses","flowerGroup","flowerGroupView"],"mappings":"AAAAA,QAAAC,IAAA,oBAKA,IAAAC,KAAAA,OAGAA,KAAAC,aAAAC,SAAAC,MAAAC,QAGAC,UACAC,MAAA,OACAC,IAAA,4BCbAT,QAAAC,IAAA,UCAAD,QAAAC,IAAA,YAMA,IAAAC,KAAAA,OAEAA,KAAAQ,kBAAAN,SAAAO,WAAAL,QAEAM,MAAAV,IAAAC,eCVAH,QAAAC,IAAA,gBAGA,IAAAC,KAAAA,OAGAA,KAAAW,eAAAT,SAAAU,KAAAR,QAEAS,QAAA,UAEAC,OAAA,WAEA,MADAC,MAAAC,WAAAC,KAAAF,KAAAG,UAAAH,MACAA,MAGAG,UAAA,SAAAC,GACA,GAAAC,GAAA,GAAApB,KAAAqB,kBAAAX,MAAAS,GACAJ,MAAAO,IAAAC,OAAAH,EAAAN,SAAAU,OCjBA1B,QAAAC,IAAA,mBAGA,IAAAC,KAAAA,OAGAA,KAAAqB,iBAAAnB,SAAAU,KAAAR,QAKAS,QAAA,UACAY,UAAA,iBAGAC,SAAAC,EAAAD,SAAAE,EAAA,kBAAAC,QAKAf,OAAA,WACA,GAAAgB,GAAAf,KAAAW,SAAAX,KAAAL,MAAAqB,SAEA,OADAhB,MAAAO,IAAAO,KAAAC,GACAf,QCvBAjB,QAAAC,IAAA,QACA6B,EAAA,MAOA,IAAAI,UAAA,GAAAhC,KAAAC,cACAgC,KAAA,YACAC,MAAA,MACA5B,MAAA,MACAC,IAAA,sBACA4B,KAAA,YAGAC,aAAA,GAAApC,KAAAC,cACAgC,KAAA,gBACAC,MAAA,MACA5B,MAAA,SACA6B,KAAA,gBAGAE,cAAA,GAAArC,KAAAC,cACAgC,KAAA,iBACAC,MAAA,MACA3B,IAAA,+BACA4B,KAAA,iBAGAG,YAAA,GAAAtC,KAAAQ,mBACAwB,SAAAI,aAAAC,gBAGAE,gBAAA,GAAAvC,KAAAW,gBAAAK,WAAAsB,aAEAV,GAAA,eAAAC,KAAAU,gBAAAzB,SAAAU","file":"scripts.min.js","sourcesContent":["console.log(\"singleFlowerModel\");\n\n\n// Namespace our app\n// || veut dire \"OR\"\nvar app = app || {};\n\n//Création d'une variable\napp.singleFlower = Backbone.Model.extend({\n\n//Chaque instance de modèles auront leurs propres propriétés\n  defaults: {\n    color: \"pink\",\n    img: \"images/placeholder.jpg\"\n  }\n\n  /*\n  initialize: function() {\n    console.log(\"A model instance named \" + this.get(\"name\") +  \" has been created and it costs \" + this.get(\"price\"));\n  \n    // Cut and paste this inside our initialize method\n    //Cela permet d'écouter les changements du modèle ?\n    // Modèle : les fleurs\n    this.on('change', function(){\n      console.log(\"Something in our model has changed\");\n    });\n\n    // Cut and paste this inside our initialize method\n    //Création d'une fonction, qui, à chaque fois que le prix change, va, va afficher le nom de l'instance du modèle, et le prix modifié\n    // La fonction sera appelée à chaque fois que le modèle est modifié\n    this.on('change:price', function(){\n      console.log(\"The price for the \" + this.get(\"name\") + \" model just changed to $\" + this.get(\"price\") + \" dollars\");\n    });\n\n  }*/\n\n});\n\n","console.log(\"routes\");","console.log(\"allFlower\");\n\n// Une collection est un groupe d'instances de modèles\n\n   \n// Namespace our flowerApp\nvar app = app || {};\n\napp.FlowersCollection = Backbone.Collection.extend({\n\n  model: app.singleFlower\n\n});\n","console.log(\"allFlowerView\");\n\n// Namespace our flowerApp\nvar app = app || {};\n\n// The view for all the flowers\napp.allFlowersView = Backbone.View.extend({\n\n  tagName: \"section\",\n\n  render: function() {\n      this.collection.each(this.addFlower, this);\n        return this;\n  },\n\n addFlower: function(flower) {\n        var flowerView = new app.singleFlowerView ({ model: flower });\n        this.$el.append(flowerView.render().el);\n }\n\n});","console.log(\"singleFlowerView\");\n\n// Namespace our flowerApp\nvar app = app || {};\n\n// The view for a single model view, which is one flower\napp.singleFlowerView = Backbone.View.extend({\n\n//tagname définit le nom de la balise HTML dans lequelles les données vont être insérées\n//className définit la classe du tagName (optionnel)\n//tagName est aussi optionnel, mais Backbonne définira par défaut la balise div\n  tagName: \"article\",\n  className: \"flowerListItem\",\n\n  //Indique la balise html où seront insérées les données (avec JQuery - plus rapide-)\n  template: _.template( $(\"#flowerElement\").html() ),\n\n  //render construit les élémnts html\n  //Elle récupère les données crées précedemment\n  //$el ?\n  render: function() {\n    var flowerTemplate = this.template(this.model.toJSON());\n    this.$el.html(flowerTemplate);\n    return this;\n  }\n\n});","console.log(\"main\");\n$(\"#kk\");\n\n// 3 instances de fleurs sont crées \n// Toutes les instances de cet objet \n// vont avoir des propriétés spécifiques\n// sauf par exemple rose arc - en - ciel qui aura li'mage\n\nvar redRoses = new app.singleFlower({\n  name: \"Red Roses\",\n  price: 39.95,\n  color: \"Red\",\n  img: \"images/redRoses.jpg\",\n  link: \"redRose\"\n});\n\nvar rainbowRoses = new app.singleFlower({\n  name: \"Rainbow Roses\",\n  price: 29.95,\n  color: \"orange\",\n  link: \"rainbowRose\"\n});\n\nvar heirloomRoses = new app.singleFlower({\n  name: \"Heirloom roses\",\n  price: 19.95,\n  img: \"images/heirloomPinkRoses.jpg\",\n  link: \"heirloomRose\"\n});\n\nvar flowerGroup = new app.FlowersCollection([\n  redRoses, rainbowRoses, heirloomRoses\n]);\n\nvar flowerGroupView = new app.allFlowersView({ collection: flowerGroup});\n\n$(\"#allFlowers\").html(flowerGroupView.render().el);\n\n/*flowerGroup.add(heirloomRoses);\nflowerGroup.remove(redRoses);\n\nconsole.log(flowerGroup.toJSON());*/\n\n\n/* console.log(heirloomRoses.toJSON());\nconsole.log(rainbowRoses.toJSON());\nconsole.log(redRoses.toJSON()); */\n\n\n   // Change the price\n   // Le modèle est modifié (son prix)\n   // rainbowRoses.set('price', 20);\n"],"sourceRoot":"/source/"}