{"version":3,"sources":["collections/allFlower.js","models/singleFlowerModel.js","routes/router.js","views/allFlowerView.js","views/singleFLowerView.js","zz-main/main.js"],"names":["console","log","app","FlowersCollection","Backbone","Collection","extend","model","singleFlower","Model","defaults","color","img","singleFlowerView","View","tagName","className","template","_","$","html","render","flowerTemplate","this","toJSON","$el","redRoses","name","price","link","rainbowRoses","heirloomRoses","flowerGroup"],"mappings":"AAAAA,QAAAC,IAAA,YAMA,IAAAC,KAAAA,OAEAA,KAAAC,kBAAAC,SAAAC,WAAAC,QAEAC,MAAAL,IAAAM,eCVAR,QAAAC,IAAA,oBAKA,IAAAC,KAAAA,OAGAA,KAAAM,aAAAJ,SAAAK,MAAAH,QAGAI,UACAC,MAAA,OACAC,IAAA,4BCbAZ,QAAAC,IAAA,UCAAD,QAAAC,IAAA,iBCAAD,QAAAC,IAAA,mBAGA,IAAAC,KAAAA,OAGAA,KAAAW,iBAAAT,SAAAU,KAAAR,QAKAS,QAAA,UACAC,UAAA,iBAGAC,SAAAC,EAAAD,SAAAE,EAAA,kBAAAC,QAKAC,OAAA,WACA,GAAAC,GAAAC,KAAAN,SAAAM,KAAAhB,MAAAiB,SAEA,OADAD,MAAAE,IAAAL,KAAAE,GACAC,QCvBAvB,QAAAC,IAAA,QACAkB,EAAA,MAOA,IAAAO,UAAA,GAAAxB,KAAAM,cACAmB,KAAA,YACAC,MAAA,MACAjB,MAAA,MACAC,IAAA,sBACAiB,KAAA,YAGAC,aAAA,GAAA5B,KAAAM,cACAmB,KAAA,gBACAC,MAAA,MACAjB,MAAA,SACAkB,KAAA,gBAGAE,cAAA,GAAA7B,KAAAM,cACAmB,KAAA,iBACAC,MAAA,MACAhB,IAAA,2BACAiB,KAAA,iBAGAG,YAAA,GAAA9B,KAAAC,mBACAuB,SAAAI,aAAAC","file":"scripts.min.js","sourcesContent":["console.log(\"allFlower\");\n\n// Une collection est un groupe d'instances de modèles\n\n   \n// Namespace our flowerApp\nvar app = app || {};\n\napp.FlowersCollection = Backbone.Collection.extend({\n\n  model: app.singleFlower\n\n});\n","console.log(\"singleFlowerModel\");\n\n\n// Namespace our app\n// || veut dire \"OR\"\nvar app = app || {};\n\n//Création d'une variable\napp.singleFlower = Backbone.Model.extend({\n\n//Chaque instance de modèles auront leurs propres propriétés\n  defaults: {\n    color: \"pink\",\n    img: \"images/placeholder.jpg\"\n  },\n\n  /*\n  initialize: function() {\n    console.log(\"A model instance named \" + this.get(\"name\") +  \" has been created and it costs \" + this.get(\"price\"));\n  \n    // Cut and paste this inside our initialize method\n    //Cela permet d'écouter les changements du modèle ?\n    // Modèle : les fleurs\n    this.on('change', function(){\n      console.log(\"Something in our model has changed\");\n    });\n\n    // Cut and paste this inside our initialize method\n    //Création d'une fonction, qui, à chaque fois que le prix change, va, va afficher le nom de l'instance du modèle, et le prix modifié\n    // La fonction sera appelée à chaque fois que le modèle est modifié\n    this.on('change:price', function(){\n      console.log(\"The price for the \" + this.get(\"name\") + \" model just changed to $\" + this.get(\"price\") + \" dollars\");\n    });\n\n  }*/\n\n});\n\n","console.log(\"routes\");","console.log(\"allFlowerView\");","console.log(\"singleFlowerView\");\n\n// Namespace our flowerApp\nvar app = app || {};\n\n// The view for a single model view, which is one flower\napp.singleFlowerView = Backbone.View.extend({\n\n//tagname définit le nom de la balise HTML dans lequelles les données vont être insérées\n//className définit la classe du tagName (optionnel)\n//tagName est aussi optionnel, mais Backbonne définira par défaut la balise div\n  tagName: \"article\",\n  className: \"flowerListItem\",\n\n  //Indique la balise html où seront insérées les données (avec JQuery - plus rapide-)\n  template: _.template( $(\"#flowerElement\").html() ),\n\n  //render construit les élémnts html\n  //Elle récupère les données crées précedemment\n  //$el ?\n  render: function() {\n    var flowerTemplate = this.template(this.model.toJSON());\n    this.$el.html(flowerTemplate);\n    return this;\n  }\n\n});","console.log(\"main\");\n$(\"#kk\");\n\n// 3 instances de fleurs sont crées \n// Toutes les instances de cet objet \n// vont avoir des propriétés spécifiques\n// sauf par exemple rose arc - en - ciel qui aura li'mage\n\nvar redRoses = new app.singleFlower({\n  name: \"Red Roses\",\n  price: 39.95,\n  color: \"Red\",\n  img: \"images/redRoses.jpg\",\n  link: \"redRose\"\n});\n\nvar rainbowRoses = new app.singleFlower({\n  name: \"Rainbow Roses\",\n  price: 29.95,\n  color: \"orange\",\n  link: \"rainbowRose\"\n});\n\nvar heirloomRoses = new app.singleFlower({\n  name: \"Heirloom roses\",\n  price: 19.95,\n  img: \"images/heirloomRoses.jpg\",\n  link: \"heirloomRose\"\n});\n\nvar flowerGroup = new app.FlowersCollection([\n  redRoses, rainbowRoses, heirloomRoses\n]);\n\n/*flowerGroup.add(heirloomRoses);\nflowerGroup.remove(redRoses);\n\nconsole.log(flowerGroup.toJSON());*/\n\n\n/* console.log(heirloomRoses.toJSON());\nconsole.log(rainbowRoses.toJSON());\nconsole.log(redRoses.toJSON()); */\n\n\n   // Change the price\n   // Le modèle est modifié (son prix)\n   // rainbowRoses.set('price', 20);\n"],"sourceRoot":"/source/"}